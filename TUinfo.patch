1. HM の最新バージョンを確認
HMのリポジトリをチェック
https://hevc.hhi.fraunhofer.de/svn/svn_HEVCSoftware/tags/
以下は HM-16.9 の例


2. ソースコードの取得
計算機サーバの作業用ディレクトリにてチェックアウト

svn checkout https://hevc.hhi.fraunhofer.de/svn/svn_HEVCSoftware/tags/HM-16.9 ./HM-16.9


3. パッチ当て
cd HM-16.9/
patch -p0 < /rda4/samba/labofile/ドキュメント/HEVC/TUinfo.patch

バージョンが大幅に異なるとパッチが当たらなくなるかも...


4. コンパイル

cd build/linux/
make
cd ../..


5. 動作確認
bin ディレクトリに実行形式のバイナリが生成されていることを確認
末尾に d がついているものはデバッグ情報付き
AppDecoderAnalyser??? はデコード時に詳細情報を表示するバージョン

以下は静止画のpgmファイルをイントラ符号化するためのスクリプト
（ラッパー）を使った例

cd test_mono/
chmod 755 test_pgm.sh
./test_pgm.sh /DATABASE/TMW/camera.pgm


6. CU, TU のブロックサイズ情報の取得（おまけ）

3. のパッチにより AppDecoderAnalyser??? を実行すると
イントラ符号化時のみカレントディレクトリの TUinfo.log に
ブロックサイズ情報を吐き出すようになる．

（test_pgm.sh を使う場合は #HMDEC=../bin/TAppDecoderAnalyserStatic のコメントを外す）

以下はこの情報を可視化するプログラムである．

gcc -Wall -o TUplot TUplot.c
./TUplot TUinfo.log /DATABASE/TMW/camera.pgm camera_blk.pgm





*** source/Lib/TLibDecoder/TDecCu.cpp.orig	2017-04-17 20:45:00.885473800 +0900
--- source/Lib/TLibDecoder/TDecCu.cpp	2017-06-06 18:14:55.237488100 +0900
***************
*** 552,558 ****
        }
      }
    }
! 
  #if DEBUG_STRING
    if (psDebug)
    {
--- 552,572 ----
        }
      }
    }
! #if RExt__DECODER_DEBUG_BIT_STATISTICS
!   {
!     static int cux = -1, cuy = -1;
!     static FILE *fp = NULL;
!     if (fp == NULL) {
!       fp = fopen("TUinfo.log", "wb");
!     }
!     if (pcCU->getCUPelX() != cux || pcCU->getCUPelY() != cuy) {
!        cux = pcCU->getCUPelX();
!        cuy = pcCU->getCUPelY();
!        fprintf(fp, "C %d %d %d %d\n", pcCU->getCUPelX(), pcCU->getCUPelY(), pcCU->getWidth(0), pcCU->getHeight(0));
!     }
!     fprintf(fp, "T %d %d %d %d\n", tuRect.x0, tuRect.y0, uiWidth, uiHeight);
!   }
! #endif
  #if DEBUG_STRING
    if (psDebug)
    {
*** /dev/null	2017-03-12 10:36:41.545998276 +0900
--- test_mono/TUplot.c	2017-04-18 19:59:45.768135000 +0900
***************
*** 0 ****
--- 1,160 ----
+ #include <stdio.h>
+ #include <stdlib.h>
+ 
+ 
+ typedef unsigned char img_t;
+ typedef struct {
+   int height;
+   int width;
+   int maxval;
+   img_t **val;
+ } IMAGE;
+ 
+ FILE *fileopen(char *filename, const char *mode)
+ {
+     FILE *fp;
+     fp = fopen(filename, mode);
+     if (fp == NULL) {
+         fprintf(stderr, "Can\'t open %s!\n", filename);
+         exit(1);
+     }
+     return (fp);
+ }
+ 
+ void *alloc_mem(size_t size)
+ {
+     void *ptr;
+     if ((ptr = (void *)malloc(size)) == NULL) {
+         fprintf(stderr, "Can\'t allocate memory (size = %d)!\n", (int)size);
+         exit(1);
+     }
+     return (ptr);
+ }
+ 
+ void **alloc_2d_array(int height, int width, int size)
+ {
+     void **mat;
+     char *ptr;
+     int k;
+ 
+     mat = (void **)alloc_mem(sizeof(void *) * height + height * width * size);
+     ptr = (char *)(mat + height);
+     for (k = 0; k < height; k++) {
+         mat[k] =  ptr;
+         ptr += width * size;
+     }
+     return (mat);
+ }
+ 
+ IMAGE *alloc_image(int width, int height, int maxval)
+ {
+     IMAGE *img;
+     img = (IMAGE *)alloc_mem(sizeof(IMAGE));
+     img->width = width;
+     img->height = height;
+     img->maxval = maxval;
+     img->val = (img_t **)alloc_2d_array(img->height, img->width,
+                                         sizeof(img_t));
+     return (img);
+ }
+ 
+ void free_image(IMAGE *img)
+ {
+     if (img != NULL && img->val != NULL) {
+         free(img->val);
+         free(img);
+     } else {
+         fprintf(stderr, "! error in free_image()\n");
+         exit(1);
+     }
+ }
+ 
+ IMAGE *read_pgm(char *filename)
+ {
+     int i, j, width, height, maxval;
+     char tmp[256];
+     IMAGE *img;
+     FILE *fp;
+ 
+     fp = fileopen(filename, "rb");
+     fgets(tmp, 256, fp);
+     if (tmp[0] != 'P' || tmp[1] != '5') {
+         fprintf(stderr, "Not a PGM file!\n");
+         exit(1);
+     }
+     while (*(fgets(tmp, 256, fp)) == '#');
+     sscanf(tmp, "%d %d", &width, &height);
+     while (*(fgets(tmp, 256, fp)) == '#');
+     sscanf(tmp, "%d", &maxval);
+     img = alloc_image(width, height, maxval);
+     for (i = 0; i < img->height; i++) {
+ 	for (j = 0; j < img->width; j++) {
+             img->val[i][j] = (img_t)fgetc(fp);
+ 	}
+     }
+     fclose(fp);
+     return (img);
+ }
+ 
+ void write_pgm(IMAGE *img, char *filename)
+ {
+     int i, j;
+     FILE *fp;
+     fp = fileopen(filename, "wb");
+     fprintf(fp, "P5\n%d %d\n%d\n", img->width, img->height, img->maxval);
+     for (i = 0; i < img->height; i++) {
+ 	for (j = 0; j < img->width; j++) {
+             putc(img->val[i][j], fp);
+ 	}
+     }
+     fclose(fp);
+     return;
+ }
+ 
+ int main(int argc, char **argv)
+ {
+     int cux, cuy, bx, by, x, y, w, h;
+     char tmp[256];
+     IMAGE *simg, *dimg;
+     FILE *fp;
+ 
+     if (argc != 4) {
+ 	printf("usage: %s TUinfo.log input.pgm, output.pgm\n", argv[0]);
+         return (0);
+     }
+     fp = fileopen(argv[1], "rb");
+     simg = read_pgm(argv[2]);
+     dimg = alloc_image(simg->width, simg->height, 255);
+     for (y = 0; y < dimg->height; y++) {
+ 	for (x = 0; x < dimg->width; x++) {
+ 	    dimg->val[y][x] = simg->val[y][x] * 0.8;
+ 	}
+     }
+     while (fscanf(fp, "%s%d%d%d%d", tmp, &x, &y, &w, &h) != EOF) {
+ 	if (tmp[0] == 'C') {
+ 	    cux = x;
+ 	    cuy = y;
+ 	} else {   
+ 	    bx = cux + x;
+ 	    by = cuy + y;
+ 	    for (x = 0; x < w; x++) {
+ 		dimg->val[by][bx + x] = 255;
+ 	    }
+ 	    if (by + h < dimg->height) {
+ 		for (x = 0; x < w; x++) {
+ 		    dimg->val[by + h][bx + x] = 255;
+ 		}
+ 	    }
+ 	    for (y = 0; y < h; y++) {
+ 		dimg->val[by + y][bx] = 255;
+ 	    }
+ 	    if (bx + w < dimg->width) {
+ 		for (y = 0; y < h; y++) {
+ 		    dimg->val[by + y][bx + w] = 255;
+ 		}
+ 	    }
+ 	}
+     }
+     write_pgm(dimg, argv[3]);
+     return (0);
+ }
*** /dev/null	2017-03-12 10:36:41.545998276 +0900
--- test_mono/test_pgm.sh	2017-06-06 18:16:42.161098100 +0900
***************
*** 0 ****
--- 1,21 ----
+ #! /bin/sh
+ IMG=$1
+ if [ ! -r "$IMG" ]; then
+         echo Usage: ./test_pgm.sh hoge.pgm
+         exit
+ fi
+ QP=32
+ SAO=1
+ HMOPT="-c ../cfg/encoder_intra_main_rext.cfg -cf 400 -f 1 -fr 1 --InternalBitDepth=8"
+ HMENC=../bin/TAppEncoderStatic
+ HMDEC=../bin/TAppDecoderStatic
+ #HMDEC=../bin/TAppDecoderAnalyserStatic
+ WIDTH=`pamfile $IMG | gawk '{print $4}'`
+ HEIGHT=`pamfile $IMG | gawk '{print $6}'`
+ tail -n +4 $IMG > input.y
+ $HMENC $HMOPT -q $QP -wdt $WIDTH -hgt $HEIGHT --SAO=$SAO -i input.y
+ SIZE=`ls -l str.bin | gawk '{print $5}'`
+ $HMDEC -d 8 -b str.bin -o rec8bit.y
+ rawtopgm $WIDTH $HEIGHT rec8bit.y > decoded.pgm
+ SNR=`pnmpsnr $IMG decoded.pgm 2>&1 | gawk '{print $7}'`
+ printf "QP:SIZE:SNR %3d%10d%10.2f\n" $QP $SIZE $SNR
